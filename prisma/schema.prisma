generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  supabaseId     String        @unique
  email          String        @unique
  name           String?
  role           UserRole      @default(USER)
  organizationId String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model Organization {
  id               String           @id @default(cuid())
  name             String
  slug             String           @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  description      String?
  agents           Agent[]
  conversations    Conversation[]
  customerMemories CustomerMemory[]
  integrations     Integration[]
  knowledgeEntries KnowledgeEntry[]
  users            User[]
  usageRecords     UsageRecord[]
  billingConfig    BillingConfig?

  @@map("organizations")
}

model Integration {
  id                String             @id @default(cuid())
  organizationId    String
  type              String
  name              String
  /// [IntegrationCredentials]
  credentials       Json               @default("{}")
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  description       String?
  agentIntegrations AgentIntegration[]
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, type])
  @@map("integrations")
}

model Agent {
  id                String             @id @default(cuid())
  organizationId    String
  name              String
  tools             String[]           @default([])
  model             String             @default("gpt-4o")
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  description       String?
  maxTokens         Int                @default(4000)
  /// [AgentRules]
  rules             Json?              @default("{}")
  systemPrompt      String?
  temperature       Float              @default(0.7)
  agentIntegrations AgentIntegration[]
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  conversations     Conversation[]
  usageRecords      UsageRecord[]

  @@map("agents")
}

model AgentIntegration {
  id            String      @id @default(cuid())
  agentId       String
  integrationId String
  isEnabled     Boolean     @default(true)
  selectedTools String[]    @default([])
  /// [AgentIntegrationConfig]
  config        Json?       @default("{}")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  agent         Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([agentId, integrationId])
  @@map("agent_integrations")
}

model Conversation {
  id             String       @id @default(cuid())
  organizationId String
  agentId        String?
  customerId     String?
  customerEmail  String?
  customerName   String?
  /// [ConversationMessages]
  messages       Json         @default("[]")
  status         String       @default("open")
  channel        String       @default("web")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  agent          Agent?       @relation(fields: [agentId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, status])
  @@map("conversations")
}

model CustomerMemory {
  id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId     String                 @map("customer_id")
  organizationId String                 @map("organization_id")
  content        String
  memoryType     String                 @default("context") @map("memory_type")
  embedding      Unsupported("vector")?
  metadata       Json                   @default("{}")
  createdAt      DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([customerId, organizationId])
  @@index([createdAt(sort: Desc)])
  @@map("customer_memories")
}

model KnowledgeEntry {
  id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String                 @map("organization_id")
  title          String
  content        String
  category       String?
  tags           String[]               @default([])
  embedding      Unsupported("vector")?
  metadata       Json                   @default("{}")
  isActive       Boolean                @default(true) @map("is_active")
  createdAt      DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("knowledge_entries")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

// =====================================
// COST TRACKING & BILLING SCHEMA
// =====================================

// Usage tracking for OpenAI API calls
model UsageRecord {
  id             String      @id @default(cuid())
  organizationId String
  agentId        String?     // Which agent made the call (optional for embeddings)
  
  // API Call Details
  model          String      // "gpt-4o", "gpt-4o-mini", "text-embedding-3-small"
  operation      String      // "chat_completion", "embedding", "moderation"
  promptTokens   Int         @default(0)
  completionTokens Int       @default(0)
  totalTokens    Int         @default(0)
  
  // Cost Calculation
  inputCost      Float       @default(0) // Cost for input tokens
  outputCost     Float       @default(0) // Cost for output tokens  
  totalCost      Float       @default(0) // Total cost for this call
  
  // Context & Metadata
  source         String      // "agent_chat", "embedding", "guardrail", "moderation"
  requestId      String?     // OpenAI request ID for debugging
  conversationId String?     // Link to conversation if applicable
  
  // Additional context stored as JSON
  /// [UsageMetadata]
  metadata       Json?       @default("{}")
  
  // Timestamps
  createdAt      DateTime    @default(now())
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent          Agent?       @relation(fields: [agentId], references: [id], onDelete: SetNull)
  
  @@index([organizationId, createdAt])
  @@index([organizationId, model])
  @@index([organizationId, source])
  @@index([agentId, createdAt])
  @@map("usage_records")
}

// Organization billing settings and budgets
model BillingConfig {
  id                    String       @id @default(cuid())
  organizationId        String       @unique
  
  // Budget Settings
  monthlyBudget         Float?       // Monthly spending limit in USD
  alertThreshold        Float        @default(0.8) // Alert at 80% of budget
  isActive              Boolean      @default(true)
  
  // Cost Optimization Settings
  preferredModel        String       @default("gpt-4o-mini") // Default model for cost optimization
  autoOptimize          Boolean      @default(false) // Auto switch to cheaper models
  maxCostPerMessage     Float?       // Maximum cost per individual message
  
  // Notifications
  emailAlerts           Boolean      @default(true)
  alertEmail            String?      // Override organization email
  
  // Timestamps
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  // Relations
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("billing_configs")
}
