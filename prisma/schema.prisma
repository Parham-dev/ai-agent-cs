// V2 Schema - Normalized version based on FOCUSED_SCHEMA.prisma
// This will replace the current schema.prisma after migration

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE MODELS - Organizations, Agents, Integrations (V2)
// ============================================================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Core entities
  agents       Agent[]
  integrations Integration[]
  conversations Conversation[]  // Keep conversations for compatibility
  
  @@map("organizations")
}

// ============================================================================
// INTEGRATION SYSTEM (V2)
// ============================================================================

model Integration {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  type           String   // 'shopify', 'stripe', etc.
  description    String?
  isActive       Boolean  @default(true)
  
  // Keep credentials as JSON since each integration has different fields
  /// [IntegrationCredentials]
  credentials    Json     @default("{}")  // Encrypted credentials specific to integration type
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Agents using this integration
  agentIntegrations AgentIntegration[]

  @@unique([organizationId, type])  // One integration per type per org
  @@map("integrations")
}

// ============================================================================
// AGENT SYSTEM (V2)
// ============================================================================

model Agent {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  isActive       Boolean  @default(true)
  
  // Agent behavior configuration
  systemPrompt   String?
  model          String   @default("gpt-4o")
  temperature    Float    @default(0.7)
  maxTokens      Int      @default(4000)
  
  // Agent rules and behavior (simplified from agentConfig)
  /// [AgentRules]
  rules          Json?    @default("{}")  // Custom rules and behavior settings
  
  // Universal tools configuration
  tools          String[] @default([])    // Array of enabled tool IDs
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Integration relationships (NEW)
  agentIntegrations AgentIntegration[]
  
  // Keep conversations for compatibility
  conversations  Conversation[]
  
  @@map("agents")
}

model AgentIntegration {
  id            String   @id @default(cuid())
  agentId       String
  integrationId String
  isEnabled     Boolean  @default(true)
  
  // Which tools from this integration the agent can use (NEW)
  selectedTools String[] @default([])  // ['searchProducts', 'getProductDetails', etc.]
  
  // Integration-specific configuration for this agent (NEW)
  /// [AgentIntegrationConfig]
  config        Json?    @default("{}")  // Agent-specific integration settings
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  agent       Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([agentId, integrationId])
  @@map("agent_integrations")
}

// ============================================================================
// CONVERSATION SYSTEM (Keep for compatibility)
// ============================================================================

model Conversation {
  id             String   @id @default(cuid())
  organizationId String
  agentId        String?                      // Assigned agent
  customerId     String?                      // External customer ID
  customerEmail  String?
  customerName   String?
  /// [ConversationMessages]
  messages       Json     @default("[]")      // Store messages as JSON for now
  status         String   @default("open")    // open, resolved, closed
  channel        String   @default("web")     // web, sms, email, etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent          Agent?       @relation(fields: [agentId], references: [id])
  
  @@index([organizationId, status])
  @@map("conversations")
}
