// FOCUSED SCHEMA - Organization, Agent, Integration Models Only
// Aggressive refactor for local development - Clean separation of concerns

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE MODELS - Organizations, Agents, Integrations
// ============================================================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Core entities
  agents       Agent[]
  integrations Integration[]
  
  @@map("organizations")
}

// ============================================================================
// INTEGRATION SYSTEM
// ============================================================================

model Integration {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  type           String   // 'shopify', 'stripe', etc.
  description    String?
  isActive       Boolean  @default(true)
  
  // Keep credentials as JSON since each integration has different fields
  credentials    Json     // Encrypted credentials specific to integration type
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Agents using this integration
  agentIntegrations AgentIntegration[]

  @@unique([organizationId, type])  // One integration per type per org
  @@map("integrations")
}

// ============================================================================
// AGENT SYSTEM
// ============================================================================

model Agent {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  isActive       Boolean  @default(true)
  
  // Agent behavior configuration
  systemPrompt   String?
  model          String   @default("gpt-4")
  temperature    Float    @default(0.7)
  maxTokens      Int      @default(4000)
  
  // Agent rules and behavior
  rules          Json?    // Custom rules and behavior settings
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Integration relationships
  agentIntegrations AgentIntegration[]
  
  @@map("agents")
}

model AgentIntegration {
  id            String   @id @default(cuid())
  agentId       String
  integrationId String
  isEnabled     Boolean  @default(true)
  
  // Which tools from this integration the agent can use
  selectedTools String[] // ['searchProducts', 'getProductDetails', etc.]
  
  // Integration-specific configuration for this agent
  config        Json?    // Agent-specific integration settings
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  agent       Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([agentId, integrationId])
  @@map("agent_integrations")
}

// ============================================================================
// MIGRATION NOTES
// ============================================================================

// MIGRATION STRATEGY:
// 1. Current Agent.agentConfig will be split into:
//    - Agent.rules (behavior rules)
//    - AgentIntegration records (which integrations are enabled + selectedTools array)

// 2. Current Integration.settings will be removed:
//    - Integration tools will be discovered dynamically from MCP servers
//    - No need to store tools in database - they come from MCP server API calls

// 3. Clean separation:
//    - Integration.credentials = JSON (different per integration type)
//    - AgentIntegration.selectedTools = String[] (which integration tools agent uses)
//    - General tools (OpenAI/custom/third-party) handled separately in code - not in DB

// 4. Dynamic Tool Discovery:
//    - When agent needs Shopify tools: Call MCP server to get available tools
//    - Filter by AgentIntegration.selectedTools to see which ones agent can use
//    - No database storage needed for integration tools - always fresh from MCP
