// =====================================
// MODERN AI CUSTOMER SERVICE PLATFORM SCHEMA
// Based on database normalization and scalability best practices
// =====================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

// =====================================
// CORE ENTITIES
// =====================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique           // for subdomain routing: acme.platform.com
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users           User[]
  integrations    Integration[]
  agents          Agent[]
  conversations   Conversation[]
  agentTools      AgentTool[]
  settings        OrganizationSetting[]
  
  @@map("organizations")
}

// =====================================
// USER MANAGEMENT & PERMISSIONS
// =====================================

model User {
  id             String     @id @default(cuid())
  organizationId String
  email          String     @unique
  name           String
  role           UserRole   @default(MEMBER)
  isActive       Boolean    @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  conversations  ConversationParticipant[]
  
  @@map("users")
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// =====================================
// INTEGRATION SYSTEM
// =====================================

model Integration {
  id             String      @id @default(cuid())
  organizationId String
  type           IntegrationType
  name           String
  description    String?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relations
  organization       Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  credentials        IntegrationCredential[]
  configurations     IntegrationConfig[]
  agentIntegrations  AgentIntegration[]
  tools              IntegrationTool[]
  
  @@unique([organizationId, type, name])
  @@map("integrations")
}

enum IntegrationType {
  SHOPIFY
  STRIPE
  ZENDESK
  SLACK
  EMAIL
  SMS
  CUSTOM
}

model IntegrationCredential {
  id            String @id @default(cuid())
  integrationId String
  key           String    // e.g., "apiKey", "accessToken", "shopUrl"
  encryptedValue String   // encrypted credential value
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([integrationId, key])
  @@map("integration_credentials")
}

model IntegrationConfig {
  id            String @id @default(cuid())
  integrationId String
  key           String
  value         String   // JSON string for complex values
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([integrationId, key])
  @@map("integration_configs")
}

// =====================================
// TOOL SYSTEM
// =====================================

model IntegrationTool {
  id            String @id @default(cuid())
  integrationId String
  name          String
  displayName   String
  description   String
  category      String?      // "search", "read", "write", "admin"
  schema        String       // JSON schema for tool parameters
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  integration   Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  agentTools    AgentTool[]
  
  @@unique([integrationId, name])
  @@map("integration_tools")
}

model AgentTool {
  id               String @id @default(cuid())
  organizationId   String
  agentId          String
  integrationToolId String?  // null for custom tools
  name             String
  displayName      String
  description      String
  schema           String   // JSON schema
  isEnabled        Boolean  @default(true)
  customConfig     String?  // JSON for agent-specific tool configuration
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent            Agent           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  integrationTool  IntegrationTool? @relation(fields: [integrationToolId], references: [id])
  
  @@unique([agentId, name])
  @@map("agent_tools")
}

// =====================================
// AGENT SYSTEM
// =====================================

model Agent {
  id             String     @id @default(cuid())
  organizationId String
  name           String
  description    String?
  instructions   String
  model          String     @default("gpt-4o")
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  // Relations
  organization      Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  conversations     Conversation[]
  tools             AgentTool[]
  integrations      AgentIntegration[]
  settings          AgentSetting[]
  
  @@map("agents")
}

model AgentIntegration {
  id            String @id @default(cuid())
  agentId       String
  integrationId String
  isEnabled     Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  agent         Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([agentId, integrationId])
  @@map("agent_integrations")
}

model AgentSetting {
  id        String @id @default(cuid())
  agentId   String
  key       String
  value     String   // JSON string for complex values
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  agent     Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@unique([agentId, key])
  @@map("agent_settings")
}

// =====================================
// CONVERSATION SYSTEM
// =====================================

model Conversation {
  id             String      @id @default(cuid())
  organizationId String
  agentId        String?
  title          String?
  status         ConversationStatus @default(OPEN)
  channel        Channel     @default(WEB)
  priority       Priority    @default(NORMAL)
  customerId     String?     // External customer identifier
  customerEmail  String?
  customerName   String?
  startedAt      DateTime    @default(now())
  closedAt       DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relations
  organization   Organization              @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent          Agent?                    @relation(fields: [agentId], references: [id])
  messages       Message[]
  participants   ConversationParticipant[]
  tags           ConversationTag[]
  
  @@index([organizationId, status])
  @@index([agentId])
  @@map("conversations")
}

enum ConversationStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
  ESCALATED
}

enum Channel {
  WEB
  EMAIL
  SMS
  SLACK
  PHONE
  WIDGET
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderType     SenderType
  senderUserId   String?     // if sender is human user
  content        String
  metadata       String?     // JSON for tool calls, confidence, etc.
  sentAt         DateTime    @default(now())
  createdAt      DateTime    @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderUser     User?        @relation(fields: [senderUserId], references: [id])
  
  @@index([conversationId, sentAt])
  @@map("messages")
}

enum SenderType {
  CUSTOMER
  AI_AGENT
  HUMAN_AGENT
  SYSTEM
}

model ConversationParticipant {
  id             String @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(OBSERVER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
  
  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

enum ParticipantRole {
  OWNER
  ASSIGNEE
  OBSERVER
}

model ConversationTag {
  id             String @id @default(cuid())
  conversationId String
  tag            String
  createdAt      DateTime @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, tag])
  @@map("conversation_tags")
}

// =====================================
// SETTINGS SYSTEM
// =====================================

model OrganizationSetting {
  id             String @id @default(cuid())
  organizationId String
  key            String
  value          String   // JSON string for complex values
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, key])
  @@map("organization_settings")
}

// =====================================
// AUDIT & ANALYTICS
// =====================================

model AuditLog {
  id           String   @id @default(cuid())
  entityType   String   // "agent", "integration", "conversation"
  entityId     String
  action       String   // "created", "updated", "deleted"
  changes      String?  // JSON of what changed
  userId       String?  // who made the change
  timestamp    DateTime @default(now())
  
  @@index([entityType, entityId])
  @@index([userId])
  @@map("audit_logs")
}

model AnalyticsEvent {
  id           String   @id @default(cuid())
  eventType    String   // "conversation_started", "tool_used", etc.
  entityId     String?  // related entity ID
  properties   String   // JSON event properties
  timestamp    DateTime @default(now())
  
  @@index([eventType, timestamp])
  @@map("analytics_events")
}
