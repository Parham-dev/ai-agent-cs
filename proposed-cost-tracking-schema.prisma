// =====================================
// COST TRACKING & BILLING SCHEMA
// =====================================
// Add this to your existing prisma/schema.prisma file

// Usage tracking for OpenAI API calls
model UsageRecord {
  id             String      @id @default(cuid())
  organizationId String
  agentId        String?     // Which agent made the call (optional for embeddings)
  
  // API Call Details
  model          String      // "gpt-4o", "gpt-4o-mini", "text-embedding-3-small"
  operation      String      // "chat_completion", "embedding", "moderation"
  promptTokens   Int         @default(0)
  completionTokens Int       @default(0)
  totalTokens    Int         @default(0)
  
  // Cost Calculation
  inputCost      Float       @default(0) // Cost for input tokens
  outputCost     Float       @default(0) // Cost for output tokens  
  totalCost      Float       @default(0) // Total cost for this call
  
  // Context & Metadata
  source         String      // "agent_chat", "embedding", "guardrail", "moderation"
  requestId      String?     // OpenAI request ID for debugging
  conversationId String?     // Link to conversation if applicable
  
  // Additional context stored as JSON
  /// [UsageMetadata]
  metadata       Json?       @default("{}")
  
  // Timestamps
  createdAt      DateTime    @default(now())
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  agent          Agent?       @relation(fields: [agentId], references: [id], onDelete: SetNull)
  
  @@index([organizationId, createdAt])
  @@index([organizationId, model])
  @@index([organizationId, source])
  @@index([agentId, createdAt])
  @@map("usage_records")
}

// Organization billing settings and budgets
model BillingConfig {
  id                    String       @id @default(cuid())
  organizationId        String       @unique
  
  // Budget Settings
  monthlyBudget         Float?       // Monthly spending limit in USD
  alertThreshold        Float        @default(0.8) // Alert at 80% of budget
  isActive              Boolean      @default(true)
  
  // Cost Optimization Settings
  preferredModel        String       @default("gpt-4o-mini") // Default model for cost optimization
  autoOptimize          Boolean      @default(false) // Auto switch to cheaper models
  maxCostPerMessage     Float?       // Maximum cost per individual message
  
  // Notifications
  emailAlerts           Boolean      @default(true)
  alertEmail            String?      // Override organization email
  
  // Timestamps
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  // Relations
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("billing_configs")
}

// Daily/Monthly aggregated usage for analytics
model UsageAggregate {
  id             String       @id @default(cuid())
  organizationId String
  
  // Time period
  date           DateTime     @db.Date
  period         String       // "daily", "monthly"
  
  // Aggregated metrics
  totalCost      Float        @default(0)
  totalTokens    Int          @default(0)
  totalRequests  Int          @default(0)
  
  // Cost breakdown by model
  /// [ModelCostBreakdown]
  costByModel    Json         @default("{}")
  
  // Cost breakdown by source/operation
  /// [SourceCostBreakdown] 
  costBySource   Json         @default("{}")
  
  // Token breakdown by model
  /// [ModelTokenBreakdown]
  tokensByModel  Json         @default("{}")
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, date, period])
  @@index([organizationId, period, date])
  @@map("usage_aggregates")
}

// Billing alerts and notifications
model BillingAlert {
  id             String       @id @default(cuid())
  organizationId String
  
  // Alert details
  alertType      String       // "budget_warning", "budget_exceeded", "high_cost_message"
  message        String
  amount         Float        // The amount that triggered the alert
  threshold      Float        // The threshold that was crossed
  
  // Status
  isRead         Boolean      @default(false)
  isResolved     Boolean      @default(false)
  
  // Timestamps
  createdAt      DateTime     @default(now())
  readAt         DateTime?
  resolvedAt     DateTime?
  
  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId, isRead])
  @@index([organizationId, createdAt])
  @@map("billing_alerts")
}

// Add these relations to existing models:

// Add to Organization model:
// usageRecords    UsageRecord[]
// billingConfig   BillingConfig?
// usageAggregates UsageAggregate[]
// billingAlerts   BillingAlert[]

// Add to Agent model:
// usageRecords    UsageRecord[]
